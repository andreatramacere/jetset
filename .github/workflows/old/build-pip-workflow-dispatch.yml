name: pip build-test-release

on:
  workflow_dispatch:
    inputs:
      git-ref:
        description: Git Ref (Optional)
        required: false
      tags:
        description: tag
        required: false
      skip_test:
        description: skip test
        required: false

jobs:
  create_release:
    if: github.event.inputs.tags != null
    runs-on: ubuntu-latest
    steps:
    - name: 'Clone Repository (Latest)'
      uses: actions/checkout@v2

    - name: 'Clone Repository (Custom Ref)'
      uses: actions/checkout@v2
      if: github.event.inputs.git-ref != ''
      with:
        ref: ${{ github.event.inputs.git-ref }}


    - name: 'Create release'
      if: github.event.inputs.tags != null
      uses: softprops/action-gh-release@v1
      id : create_release
      #if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: Release  ${{ github.event.inputs.tags }}
        tag_name: ${{ github.event.inputs.tags }}

    #- name: 'Output Release URL File'
    #  run: |
    #    echo "${{ steps.create_release.outputs.url }}" > release_url.txt
    #    echo "release url=${{ steps.create_release.outputs.url }}"

    #- name: 'Save Release URL File for publish'
    #  uses: actions/upload-artifact@v1
    #  with:
    #    name: release_url
    #    path: release_url.txt


  build_pip:
    needs: [create_release]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-10.15]
        python-version: [3.7,3.8,3.9]

    steps:
      - name: 'Clone Repository (Latest)'
        uses: actions/checkout@v2

      - name: 'Clone Repository (Custom Ref)'
        uses: actions/checkout@v2
        if: github.event.inputs.git-ref != ''
        with:
          ref: ${{ github.event.inputs.git-ref }}

      - name: 'set env JETSETBESSELBUILD'
        run: |
          echo "FALSE">JETSETBESSELBUILD
          echo "JETSETBESSELBUILD=$(cat JETSETBESSELBUILD)" >> $GITHUB_ENV

      - name: 'echo env TEST'
        run: |
          echo "JETSETBESSELBUILD=${{ env.JETSETBESSELBUILD }}"


      - name: 'Install swig'
        run: |
           if [ "$RUNNER_OS" == "Linux" ]; then
                sudo apt-get update; sudo apt-get install swig
           elif [ "$RUNNER_OS" == "macOS" ]; then
                brew install swig
           else
                echo "$RUNNER_OS not supported"
                exit 1
           fi

      - name: 'Setup pip'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: 'adapt req'
        run: |
          python .github/workflows/adapt_reqirements_to_git_action.py

      - name: 'Install dependencies'
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install wheel
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - uses: actions/checkout@v2

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==1.11.1

      - name: 'pip build'
        run: |
          echo "JETSETBESSELBUILD=${{ env.JETSETBESSELBUILD }}"
          python setup.py clean
          echo "JETSETBESSELBUILD=${{ env.JETSETBESSELBUILD }}"
      
      - name: 'pip build install sdist'
        run: |
          python setup.py sdist 
          pip install dist/*.tar.gz
          
      - name: 'test sdist'
        working-directory: .github/action_test/
        run: |
          echo $(running tests!)
          pytest --disable-warnings  --pyargs  -vvv jetset.tests.test_jet_model
      

      - name: 'pip build install wheel'
        run: |
          pip uninstall --yes jetset
          python setup.py clean 
          python setup.py  bdist_wheel 
          pip install dist/*.whl


      - name: 'test'
        if: github.event.inputs.skip_test != 'yes'
        working-directory: .github/action_test/
        run: |
          echo $(running tests!)
          pytest --disable-warnings  --pyargs  -vvv jetset.tests.test_jet_model
          pytest  --pyargs -vvv jetset.tests.test_hadronic_energetic
          pytest  --pyargs -vvv jetset.tests.test_integration::TestIntegration

      - name: 'pip build  sdist'
        run: |
          python setup.py sdist 
        
      - name: 'set pkg version'
        run: |
          echo "PKG_VERSION=$(cd ../../ && python -c "import jetset;print(jetset.__version__)")" >> $GITHUB_ENV

      - name: 'echo pkg version'
        run: |
          echo "PKG_VERSION=${{env.PKG_VERSION}}"

      #- name: 'upload .whl'
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: jetset-${{ env.PKG_VERSION }}-${{ matrix.os }}-pip-binary.tar.gz
      #    path: dist/*.whl

      #- name: 'upload sdist'
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: jetset-${{ env.PKG_VERSION }}-${{ matrix.os }}-src.tar.gz
      #    path: dist/*.tar.gz

      - name: 'prepare asset pip'
        run: |
          mv dist pip-binary-${{ env.PKG_VERSION }}-${{ matrix.os}}-py-${{ matrix.python-version }}
          tar -cvf pip-binary-${{ env.PKG_VERSION }}-${{ matrix.os}}-py-${{ matrix.python-version }}.tar ./pip-binary-${{ env.PKG_VERSION }}-${{ matrix.os}}-py-${{ matrix.python-version }}/*.whl

      - name: 'prepare asset src'
        run: |
          mv pip-binary-${{ env.PKG_VERSION }}-${{ matrix.os }}-py-${{ matrix.python-version }} pip-src-${{ env.PKG_VERSION }}-${{ matrix.os }}
          tar -cvf pip-src-${{ env.PKG_VERSION }}-${{ matrix.os }}.tar ./pip-src-${{ env.PKG_VERSION }}-${{ matrix.os }}/*.tar.gz

      - name: 'Upload Binary Release Asset'
        uses: softprops/action-gh-release@v1
        with:
          name: Release  ${{ github.event.inputs.tags }}
          tag_name: ${{ github.event.inputs.tags }}
          files: |
            pip-binary-${{ env.PKG_VERSION }}-${{ matrix.os}}-py-${{ matrix.python-version }}.tar
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Upload  Src Release Asset'
        uses: softprops/action-gh-release@v1
        if: matrix.python-version == 3.7
        with:
          name: Release  ${{ github.event.inputs.tags }}
          tag_name: ${{ github.event.inputs.tags }}
          files: |
              pip-src-${{ env.PKG_VERSION }}-${{ matrix.os }}.tar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}